<!DOCTYPE html>
<!-- saved from url=(0074)http://learning.coderschool.vn/courses/react_native_devc/unit/4#!exercises -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Lab: Week 4 - React Native Devc | CoderS©hool Courses</title><link href="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/application.css" rel="stylesheet" type="text/css"><link href="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/print.css" media="print" rel="stylesheet" type="text/css"><meta content="width=device-width, initial-scale=1.0" name="viewport"><meta content="noindex, nofollow" name="robots"><script type="text/javascript" async="" src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/linkid.js"></script><script async="" src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/analytics(1).js"></script><script type="text/javascript">// Google analytics setup
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', "UA-66733634-2", "coderschool.vn");
ga('require', 'linkid', 'linkid.js');
ga('require', 'displayfeatures');
ga('send', 'pageview');</script></head><body><div class="navbar navbar-default hidden-print" id="main-nav"><div class="container"><div class="navbar-header"><button class="navbar-toggle" data-target=".navbar-collapse" data-toggle="collapse" type="button"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a class="navbar-brand" href="http://learning.coderschool.vn/">CoderS©hool Courses</a></div><div class="navbar-collapse collapse"><ul class="nav navbar-nav"><li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="javascript:void(0);">Quick Links <b class="caret"></b></a><ul class="dropdown-menu"><li><a target="_blank" href="http://guides.codepath.com/android/Android-Bootcamp-Cliffnotes">Cliffnotes</a></li><li><a target="_blank" href="http://guides.codepath.com/android/Troubleshooting-Common-Issues">Troubleshooting</a></li></ul></li></ul><ul class="nav navbar-nav"><li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="javascript:void(0);">Quick Actions <b class="caret"></b></a><ul class="dropdown-menu"><li><a target="_blank" href="http://apply.coderschool.vn/attendance/react_native_devc_mw_batch_2_hcm/excused-absence/"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>&nbsp;&nbsp;Request Excused Absence</a></li><li><a target="_blank" href="http://discussions.coderschool.vn/courses/react_native_devc/questions/new"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span>&nbsp;&nbsp;Ask a Question</a></li><li><a target="_blank" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#"><span class="glyphicon glyphicon-plus-sign" aria-hidden="true"></span>&nbsp;&nbsp;Add an App Idea</a></li><li><a target="_blank" href="http://discussions.coderschool.vn/courses/react_native_devc/notes/new"><span class="glyphicon glyphicon-comment" aria-hidden="true"></span>&nbsp;&nbsp;Post a Note</a></li></ul></li></ul><ul class="nav navbar-nav navbar-right"><li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="javascript:void(0);" style="overflow:hidden"><div class="pull-left"><img width="20" class="img-circle img-responsive" src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/iJRaldP.png"></div>&nbsp;<div class="pull-right">Dong Quang Dang <b class="caret"></b></div></a><ul class="dropdown-menu"><li><a data-method="delete" href="http://learning.coderschool.vn/sessions">Logout</a></li></ul></li></ul></div></div></div><div class="container"><div class="title clearfix"><h1>React Native Devc</h1><p class="alert alert-info hidden-print">Need help?&nbsp;Post on our <a target="blank" class="alert-link" href="https://discussions.coderschool.vn/">discussion system</a> (<a href="mailto:sang@coderschool.vn">email</a>)&nbsp;or email us at <a class="alert-link" href="mailto:thanh@coderschool.vn">thanh@coderschool.vn</a></p></div><div class="row"><div class="col-md-2 sidebar hidden-print"><ul class="nav nav-pills nav-stacked"><li><a href="http://learning.coderschool.vn/courses/react_native_devc/pages/bootcamp_structure">Overview</a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/1#!module"><span>Week 1 &nbsp;</span><span class="glyphicon glyphicon-ok"></span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/2#!module"><span>Week 2 &nbsp;</span><span class="glyphicon glyphicon-ok"></span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/3#!module"><span>Week 3 &nbsp;</span><span class="glyphicon glyphicon-ok"></span></a></li><li class="active"><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#!module"><span>Week 4 &nbsp;</span><span class="glyphicon glyphicon-map-marker"></span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/5#!module"><span>Week 5 &nbsp;</span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/6#!module"><span>Week 6 &nbsp;</span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/7#!module"><span>Week 7 &nbsp;</span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/8#!module"><span>Week 8 &nbsp;</span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/9#!module"><span>Week 9 &nbsp;</span></a></li><li><a href="http://learning.coderschool.vn/courses/react_native_devc/unit/10#!module"><span>Week 10 &nbsp;</span></a></li></ul></div><div class="col-md-10"><ul class="nav nav-tabs hidden-print"><li><a data-toggle="tab" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#module"><span class="glyphicon glyphicon-home" aria-hidden="true"></span>&nbsp;Resources</a></li><li class="active"><a data-toggle="tab" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#exercises" aria-expanded="true">Lab</a></li><li><a data-toggle="tab" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#assignment">Assignment</a></li></ul><div class="tab-content section-content"><div class="tab-pane" id="module"><div class="panel panel-default"><div class="panel-body markdown-body"><div class="action-bar pull-right hidden-print"></div><h1><a class="anchor" id="heading-week-4-intro-to-navigation" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-week-4-intro-to-navigation"><span class="glyphicon glyphicon-link"></span></a>Week 4 - Intro to Navigation</h1>

<h2><a class="anchor" id="heading-lecture-slides" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-lecture-slides"><span class="glyphicon glyphicon-link"></span></a>Lecture Slides</h2>

<ul>
<li>React navigation</li>
<li>Drawer navigation, Tab navigation, Stack Navigation</li>
</ul>

<iframe allowfullscreen="" src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/RNDevC-Week-4.html" width="100%" height="400px"></iframe>

<h3><a class="anchor" id="heading-lecture-video" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-lecture-video"><span class="glyphicon glyphicon-link"></span></a>Lecture Video</h3>

<p>Comming soon</p>

<div style="position: relative; padding-bottom: 75%; height: 0;"><iframe src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/99379ff1e17f4be98b863839704df18b.html" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe></div>

<h3><a class="anchor" id="heading-other-resources" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-other-resources"><span class="glyphicon glyphicon-link"></span></a>Other Resources</h3>

<ul>
<li>React navigation : <a href="https://reactnavigation.org/">https://reactnavigation.org/</a></li>
<li>How to pass parameter to other screen, and how to handle it : <a href="https://reactnavigation.org/docs/en/params.html">https://reactnavigation.org/docs/en/params.html</a></li>
<li>Header bar, go config it : <a href="https://reactnavigation.org/docs/en/headers.html">https://reactnavigation.org/docs/en/headers.html</a></li>
<li>Authentication flow : <a href="https://reactnavigation.org/docs/en/auth-flow.html">https://reactnavigation.org/docs/en/auth-flow.html</a></li>
</ul>
</div></div></div><div class="tab-pane active" id="exercises"><div class="panel panel-default"><div class="panel-body markdown-body"><div class="action-bar pull-right hidden-print"></div><h1><a class="anchor" id="heading-week-4-lab-zalo-navigation" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-week-4-lab-zalo-navigation"><span class="glyphicon glyphicon-link"></span></a>Week 4 - Lab - <strong>Zalo Navigation</strong></h1>

<h2><a class="anchor" id="heading-introduction" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-introduction"><span class="glyphicon glyphicon-link"></span></a>Introduction 🌟</h2>

<p>Let's build a new app 📱 using <a href="https://facebook.github.io/react-native/">React Native</a> &amp; <a href="https://expo.io/">Expo</a>. We're going to clone Zalo. Our app will help users see a lot of unique content based on what it is they're looking for. This will require the use of a library called <a href="https://reactnavigation.org/">React Navigation</a> that comes with Expo.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/HtHBzqx.jpg" title="pwd" width="" alt="pwd"></p>

<h3><a class="anchor" id="heading-features" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-features"><span class="glyphicon glyphicon-link"></span></a>Features 🎯🥇🏆</h3>

<ul>
<li>[ ] User can see tabs at the bottom of the screen.</li>
<li>[ ] User can press a tab to navigate to a unique screen.</li>
<li>[ ] User can see tabs which corresponds to the tabs of Zalo.</li>
<li>[ ] User can see a <code>Messsages</code> screen which has many messages.</li>
<li>[ ] User can press on an individual message to navigate to a <code>Conversation</code> screen.</li>
<li>[ ] User can see information about the user whose message they pressed on arriving at the <code>Conversation</code> screen.</li>
<li>[ ] User can see an icon on the <code>Messages</code> screen which when pressed, opens a <code>Drawer</code>.</li>
<li>[ ] User can see additional navigation items when they <strong>open</strong> the <code>Drawer</code>.</li>
</ul>

<h3><a class="anchor" id="heading-learning-objectives" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-learning-objectives"><span class="glyphicon glyphicon-link"></span></a>Learning Objectives ✍️📚📝</h3>

<ol>
<li><p>Learn how to create multiple screens.</p>

<ul>
<li>Recognize any meaningful app has content hidden in different parts of the app; and that users need a way to <strong>get to</strong> that content.</li>
</ul></li>
<li><p>Learn how to use <a href="https://reactnavigation.org/">React Navigation</a>.</p>

<ul>
<li>Recognize this is a library we get with Expo which has the responsibility of handling navigation.</li>
</ul></li>
<li><p>Learn how to customize the default navigator of Expo.</p>

<ul>
<li>Recognize the default n`avigator is a boilerplate setup which we can build off of.</li>
</ul></li>
<li><p>Learn how to use the <code>navigation</code> prop provided by React Navigation to our screen components.</p>

<ul>
<li>Recognize it's an object with a lot of useful keys.</li>
</ul></li>
</ol>

<blockquote>
<p><strong>Tip</strong> 💡: Screens give us a way to provide a lot of content to our users for their consumption whether it's for work or play. Structuring the screens in a meaningful and easily understood way is called <a href="https://en.wikipedia.org/wiki/Information_architecture">information architecture</a>.</p>
</blockquote>

<h3><a class="anchor" id="heading-milestone-1-setup-initial-screens" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-1-setup-initial-screens"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 1 🛣🏃 Setup initial screens</strong></h3>

<p><strong>A)</strong> Use <code>expo init</code> to generate a new project. I'm calling mine <code>rn-zalo</code>. This time however, choose the <strong>tabs</strong> option when prompted.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/KdO1Kd3.png" title="pwd" width="" alt="pwd"></p>

<h4><a class="anchor" id="heading-we-should-now-see-a-new-boiler-plate-app-when-we-open-our-simulator-that-has-3-default-tabs-at-the-bottom-home-links-settings" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-see-a-new-boiler-plate-app-when-we-open-our-simulator-that-has-3-default-tabs-at-the-bottom-home-links-settings"><span class="glyphicon glyphicon-link"></span></a>We should now see a new boiler plate app when we open our simulator that has 3 default tabs at the bottom, <code>Home</code>, <code>Links</code>, &amp; <code>Settings</code></h4>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/5wXJJMO.png" title="pwd" width="" alt="pwd"></p>

<blockquote>
<p><strong>Tip</strong> 💡: This project has a lot of stuff setup for you. Poke around the inital code for a minute or two to see how the team at Facebook likes structuring their projects. You'll learn a lot!</p>
</blockquote>

<p><strong>B)</strong> Refactor first tab.</p>

<p>We're going to need 5 screens <code>Messsages</code>, <code>Contacts</code>, <code>Groups</code>, <code>Timeline</code>, &amp; <code>More</code> eventually. Let's start with <code>Messages</code>.</p>

<p>Open up the <code>./navigation/MainTabNavigator.js</code> file and look for the following line.</p>
<pre class="highlight plaintext"><code>import HomeScreen from "../screens/HomeScreen";
</code></pre>

<p>Then change it to</p>
<pre class="highlight plaintext"><code>import MessagesScreen from "../screens/MessagesScreen";
</code></pre>

<p>We're changing the component we're importing and where we're importing from in order to be more explicit to our future teammates.</p>

<p><strong>C)</strong> Change the places where <code>HomeScreen</code> was previously used and change it to correspond to the new value(<code>Messages</code>). There are other keys/variables we should change as well in order to be consistent</p>
<pre class="highlight plaintext"><code>const MessagesStack = createStackNavigator(
  {
    Messages: MessagesScreen
  },
  config
);
</code></pre>

<p>This is a <a href="https://reactnavigation.org/docs/en/stack-navigator.html">Stack Navigator</a>. Stack navigators can be thought of as screens on top of each other. We can put a new screen onto our Stack as well as remove them.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/stack.png" title="Stack Navigator" width="" alt="Stack Navigator"></p>
<pre class="highlight plaintext"><code>MessagesStack.navigationOptions = {
  tabBarLabel: "Messages",
  tabBarIcon: ({ focused }) =&gt; (
    &lt;TabBarIcon
      focused={focused}
      name={Platform.OS === "ios" ? "ios-chatbubbles" : "android-messages"}
    /&gt;
  )
};
</code></pre>

<p>Here were defining our <a href="https://reactnavigation.org/docs/en/navigation-options-resolution.html#docsNav">Navigation Options</a>. Specifically, what the tab says and what icon is displayed at the bottom of the screen.</p>
<pre class="highlight plaintext"><code>MessagesStack.path = "";

// ... code ..

const tabNavigator = createBottomTabNavigator({
  MessagesStack
});
</code></pre>

<p><strong>D)</strong> Update the name of the file from <code>./screens/HomeScreen.js</code> to <code>./screens/MessagesScreen.js</code></p>

<p>Everything should continue working, however our <code>Home</code> tab should be updated to <code>Messsages</code> and should display a different icon, <em>incredible</em>.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/F8DdIOH.gif" title="pwd" width="" alt="pwd"></p>

<p><strong>E)</strong> Delete everything in <code>MessagesScreen.js</code> and refactor to get a blank screen with minimaltext, <code>Messages Screen</code>.</p>

<details>

<summary>Refactored Messages Screen</summary>

```jsx
import React from "react";
import { View, Text, StyleSheet } from "react-native";

export default function MessagesScreen(props) {
  return (
    <view style="{styles.container}">
      <text>Messages Screen</text>
    </view>
  );
}

MessagesScreen.navigationOptions = {
  title: "Messages"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});
```

</details>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/WNassZC.png" title="pwd" width="" alt="pwd">
There's nothing fancy going on here. Just a few required imports, a functional component defined, styles, and an additional <a href="https://reactnavigation.org/docs/en/redux-integration.html#what-about-navigationoptions">Navigation Options</a> for this individual screen.</p>

<p>Take note of the following lines.</p>
<pre class="highlight plaintext"><code>MessagesScreen.navigationOptions = {
  title: "Messages"
};
</code></pre>

<p>The value of the <code>title</code> key corresponds to the header we see at the top of the screen. There are other options as well which we'll soon work with.</p>

<p><strong>F)</strong> Repeat for <code>Contacts</code> &amp; <code>Groups</code>.</p>

<p>For these two, we'll rename the files, import, definitions, and appropriate variables to correspond to this content it will hold like we did with <code>Home</code> =&gt; <code>Messages</code>.</p>

<details>

<summary>LinksScreen =&gt; ContactsScreen</summary>

```jsx
// ./navigation/MainTabNavigator.js
import ContactsScreen from "../screens/ContactsScreen";
```

```jsx
// ./navigation/MainTabNavigator.js
const ContactsStack = createStackNavigator(
  {
    Contacts: ContactsScreen
  },
  config
);

ContactsStack.navigationOptions = {
  tabBarLabel: "Contacts",
  tabBarIcon: ({ focused }) =&gt; (
    <tabbaricon focused="{focused}" name="{Platform.OS" :=""></tabbaricon>
  )
};

ContactsStack.path = "";
```

```jsx
// ./screens/ContactsScreen.js
import React from "react";
import { View, Text, StyleSheet } from "react-native";

export default function ContactsScreen(props) {
  return (
    <view style="{styles.container}">
      <text>Contacts Screen</text>
    </view>
  );
}

ContactsScreen.navigationOptions = {
  title: "Contacts"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});
```

</details>

<details>

<summary>SettingsScreen =&gt; GroupsScreen</summary>

```jsx
// ./navigation/MainTabNavigator.js
import GroupsScreen from "../screens/GroupsScreen";
```

```jsx
// ./navigation/MainTabNavigator.js
const GroupsStack = createStackNavigator(
  {
    Groups: GroupsScreen
  },
  config
);

GroupsStack.navigationOptions = {
  tabBarLabel: "Groups",
  tabBarIcon: ({ focused }) =&gt; (
    <tabbaricon focused="{focused}" name="{Platform.OS" :=""></tabbaricon>
  )
};

GroupsStack.path = "";
```

```jsx
// ./screens/GroupsScreen.js
import React from "react";
import { View, Text, StyleSheet } from "react-native";

export default function GroupsScreen(props) {
  return (
    <view style="{styles.container}">
      <text>Groups Screen</text>
    </view>
  );
}

GroupsScreen.navigationOptions = {
  title: "Groups"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});
```

</details>

<p><strong>G)</strong> Update the <code>createBottomNavigator</code> in <code>./navigation/MainTabNavigator.js</code> as well.</p>
<pre class="highlight plaintext"><code>const tabNavigator = createBottomTabNavigator({
  MessagesStack,
  ContactsStack,
  GroupsStack
});
</code></pre>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/fKDx0lJ.gif" title="pwd" width="" alt="pwd"></p>

<p>This code will take our 3 stack navigators and consolidate them into a single <a href="https://reactnavigation.org/docs/en/tab-based-navigation.html">Tab Navigator</a>.</p>

<hr>

<blockquote>
<p><strong>Key Points</strong> 🔑📝</p>
</blockquote>

<ul>
<li>Our apps will need many different screens to show different content.</li>
<li>There are <code>Stack</code> &amp; <code>Tab</code> navigators to help us handle this.</li>
<li>Navigation Options can be used to customize text, icons, and colors.</li>
<li><a href="https://reactnavigation.org/en/">React Navigation</a> is a set of configurations that come in the shape of <code>Objects</code>, <code>keys</code>, &amp; <code>Components</code>.</li>
</ul>

<hr>

<h3><a class="anchor" id="heading-milestone-2-add-additional-screens-and-messagesscreen-messages" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-2-add-additional-screens-and-messagesscreen-messages"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 2 🛣🏃 Add additional screens and <code>MessagesScreen</code> messages</strong></h3>

<p><strong>A)</strong> Add two new tabs that correspond to Zalo's <code>Timeline</code> &amp; <code>More</code> screens.</p>

<details>

<summary>Timeline tab</summary>

```jsx
// ./navigation/MainTabNavigator.js
import TimelineScreen from "../screens/TimelineScreen";
```

```jsx
// ./navigation/MainTabNavigator.js
const TimelineStack = createStackNavigator(
  {
    Timeline: TimelineScreen
  },
  config
);

TimelineStack.navigationOptions = {
  tabBarLabel: "Timeline",
  tabBarIcon: ({ focused }) =&gt; (
    <tabbaricon focused="{focused}" name="{Platform.OS" :=""></tabbaricon>
  )
};

TimelineStack.path = "";

const tabNavigator = createBottomTabNavigator({
  MessagesStack,
  ContactsStack,
  GroupsStack,
  TimelineStack
});
```

```jsx
// ./screens/TimelineScreen.js
import React from "react";
import { View, Text, StyleSheet } from "react-native";

export default function TimelineScreen(props) {
  return (
    <view style="{styles.container}">
      <text>Timeline Screen</text>
    </view>
  );
}

TimelineScreen.navigationOptions = {
  title: "Timeline"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});
```

</details>

<details>

<summary>More tab</summary>

```jsx
// ./navigation/MainTabNavigator.js
import MoreScreen from "../screens/MoreScreen";
```

```jsx
// ./navigation/MainTabNavigator.js
const MoreStack = createStackNavigator(
  {
    More: MoreScreen
  },
  config
);

MoreStack.navigationOptions = {
  tabBarLabel: "More",
  tabBarIcon: ({ focused }) =&gt; (
    <tabbaricon focused="{focused}" name="{Platform.OS" :=""></tabbaricon>
  )
};

MoreStack.path = "";

const tabNavigator = createBottomTabNavigator({
  MessagesStack,
  ContactsStack,
  GroupsStack,
  TimelineStack,
  MoreStack
});
```

```jsx
// ./screens/MoreScreen.js
import React from "react";
import { View, Text, StyleSheet } from "react-native";

export default function MoreScreen(props) {
  return (
    <view style="{styles.container}">
      <text>More Screen</text>
    </view>
  );
}

MoreScreen.navigationOptions = {
  title: "More"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});
```

</details>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/UfEukDf.gif" title="pwd" width="" alt="pwd">
We should now see that we've got 5 tabs. 2 of these tabs we made ourselves, <em>excellent</em>.</p>

<p><strong>B)</strong> Get data for <code>MessagesScreen</code>.</p>

<p>Copy <a href="https://gist.github.com/PrimeTimeTran/b54fdc9a8f4ab7f7e8796560944bdf2b">this gist</a> and paste it to a file called <code>messages.json</code> in the <strong>root</strong> of your project.</p>

<p><strong>C)</strong> Import the data into the <code>MessagesScreen</code> for consumption.</p>
<pre class="highlight plaintext"><code>import messages from "../messages.json";
</code></pre>

<p><strong>D)</strong> Define a new component, <code>MessageCard</code>, which will be responsible for rendering the content for each message to a beautiful card.</p>

<details>

<summary>MessageCard Component</summary>

```jsx
// ./components/MessageCard.js
import React from "react";
import { Text, View, Image, StyleSheet, TouchableOpacity } from "react-native";

const MessageCard = props =&gt; (
  <touchableopacity onpress="{()"> props.onGoToConversation("Conversation", { ...props })}
  &gt;
    <view style="{styles.messageCardStyle}">
      <view>
        <img style="{styles.image}" source="unspecified">
      </view>
      <view style="{styles.cardTextContainer}">
        <view style="{styles.cardText}">
          <text style="unspecified">{props.name}</text>
          <text>{props.last_message_date}</text>
        </view>
        <text numberoflines="{3}">{props.last_message_content}</text>
      </view>
    </view>
  </touchableopacity>
);

export default MessageCard;

const styles = StyleSheet.create({
  messageCardStyle: {
    margin: 5,
    padding: 5,
    width: "100%",
    shadowRadius: 5,
    shadowOpacity: 0.9,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    justifyContent: "space-around",
    shadowColor: "rgba(0,0,0,0.2)",
    shadowOffset: { height: 5, width: 5 }
  },
  image: {
    width: 75,
    height: 75,
    borderWidth: 1,
    borderRadius: 37,
    borderColor: "grey"
  },
  cardTextContainer: {
    flex: 1,
    marginLeft: 10
  },
  cardText: {
    flex: 1,
    width: "100%",
    flexDirection: "row",
    justifyContent: "space-between"
  }
});
```

</details>

<h4><a class="anchor" id="heading-take-note-of-the-following-line-of-code" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-take-note-of-the-following-line-of-code"><span class="glyphicon glyphicon-link"></span></a>Take note of the following line of code.</h4>
<pre class="highlight plaintext"><code>&lt;TouchableOpacity
  onPress={() =&gt; props.onGoToConversation('Conversation', { ...props })}
&gt;
</code></pre>

<p>We'll implement navigating to the <code>Conversation</code> component by passing a <code>prop</code>, <code>onGoToConversation</code>, to <code>MessageCard</code> shortly.</p>

<ul>
<li>The prop <code>onGoToConversation</code> is a function.</li>
<li>The <strong>1st</strong> argument of this function is the <code>key</code> of the Screen we want to navigate to.</li>
<li>The <strong>2nd</strong> is an object. The object contains all the props sent to <code>MessageCard</code> via a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread operator</a>.</li>
<li>The <code>object</code> we pass as the second argument will end up as props in the destination component, the value of the <code>Conversation</code> <strong>key/argument</strong>.</li>
</ul>

<p><strong>E)</strong> Refactor <code>MessagesScreen</code> to use the <code>component</code> we just defined, <code>MessageCard</code>.</p>

<details>

<summary>MessagesScreen</summary>

```jsx
// ./screens/MessagesScreen.js
import React from "react";
import { View, ScrollView, Text, StyleSheet } from "react-native";

import MessageCard from "../components/MessageCard";

import messages from "../messages.json";

export default function MessagesScreen(props) {
  return (
    <view style="{styles.container}">
      <scrollview style="{styles.container}" contentcontainerstyle="{styles.contentContainer}">
        {messages.map(msg =&gt; {
          return (
            <messagecard key="{msg.id}" name="{msg.first_name}" uri="{msg.avatar_url}" last_message_date="{msg.last_message_date}" last_message_content="{msg.last_message_content}" ongotoconversation="{props.navigation.navigate}"></messagecard>
          );
        })}
      </scrollview>
    </view>
  );
}

MessagesScreen.navigationOptions = {
  title: "Messages"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff"
  },
  contentContainer: {
    alignItems: "center",
    justifyContent: "center"
  },
  messageCardStyle: {
    margin: 5,
    padding: 5,
    width: "100%",
    shadowRadius: 5,
    shadowOpacity: 0.9,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    justifyContent: "space-around",
    shadowColor: "rgba(0,0,0,0.2)",
    shadowOffset: { height: 5, width: 5 }
  },
  image: {
    width: 75,
    height: 75,
    borderWidth: 1,
    borderRadius: 37,
    borderColor: "grey"
  },
  cardTextContainer: {
    flex: 1,
    marginLeft: 10
  },
  cardText: {
    flex: 1,
    width: "100%",
    flexDirection: "row",
    justifyContent: "space-between"
  }
});
```

</details>

<p>Look at the prop <code>onGoToConversation</code> we pass to <code>MessageCard</code> component.</p>
<pre class="highlight plaintext"><code>onGoToConversation={props.navigation.navigate}
</code></pre>

<h4><a class="anchor" id="heading-there-is-something-we-have-to-memorize-about-react-navigation" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-there-is-something-we-have-to-memorize-about-react-navigation"><span class="glyphicon glyphicon-link"></span></a>There is something we have to <strong>memorize</strong> about React Navigation.</h4>

<p>Any component which is listed as a key's value in our <code>MainTabNavigator</code> file will automatically be passed a <code>prop</code> called <code>navigation</code>.</p>

<p>This is a tremendously useful prop. Spend a few minutes reading about all the valuable data passed into it <a href="https://reactnavigation.org/docs/en/navigation-prop.html">here</a>.</p>

<p>This prop will allow us to navigate, pass props, and view the state of our app in terms of <strong>where</strong> the user is.</p>

<blockquote>
<p><strong>Key Points</strong> 🔑📝</p>
</blockquote>

<ul>
<li>Creating a new tab is as simple as defining a new component and then passing it to our <a href="https://medium.com/@rossbulat/introduction-to-react-navigation-and-navigators-in-react-native-3efcf7239a43">Navigators</a>.</li>
<li>React Navigation passed all screen components a prop called <code>navigation</code>.</li>
<li>The <code>navigation</code> prop provides us with a lot of useful methods such as <code>navigate</code>.</li>
</ul>

<hr>

<h3><a class="anchor" id="heading-milestone-3-implement-behavior-where-a-user-can-navigate-to-a-specific-conversation-and-see-pertinent-content" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-3-implement-behavior-where-a-user-can-navigate-to-a-specific-conversation-and-see-pertinent-content"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 3 🛣🏃 Implement behavior where a user can navigate to a specific conversation and see pertinent content</strong></h3>

<p><strong>A)</strong> Define a new component, <code>ConversationScreen</code>, which will represent a private conversation our user has with another user.</p>
<pre class="highlight plaintext"><code>// ./screens/ConversationScreen.js
import React from "react";
import { Image, Text, ScrollView, StyleSheet } from "react-native";

export default function ConversationScreen(props) {
  const propsFromMessages = props.navigation.state.params;
  return (
    &lt;ScrollView contentContainerStyle={styles.contentContainer}&gt;
      &lt;Image
        source=unspecified
        style={{
          width: 200,
          height: 200
        }}
      /&gt;
      &lt;Text&gt;{props.navigation.state.params.name}&lt;/Text&gt;
      &lt;Text&gt;{props.navigation.state.params.last_message_content}&lt;/Text&gt;
    &lt;/ScrollView&gt;
  );
}

ConversationScreen.navigationOptions = {
  title: "Conversation"
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 15,
    backgroundColor: "#fff"
  },
  contentContainer: {
    alignItems: "center",
    justifyContent: "center"
  }
});
</code></pre>

<p><strong>B)</strong> Import the component into <code>./navigators/MainTabNavigator.js</code></p>
<pre class="highlight plaintext"><code>import ConversationScreen from "../screens/ConversationScreen";
</code></pre>

<p><strong>C)</strong> Define a new key, <code>Conversation</code>, in the <code>MessagesStack</code> where the value is the component we just imported, <code>ConversationScreen</code>.</p>
<pre class="highlight plaintext"><code>const MessagesStack = createStackNavigator(
  {
    Messages: MessagesScreen,
    Conversation: ConversationScreen
  },
  config
);
</code></pre>

<p>The reason we place the definition in the <code>MessagesStack</code> is because the user navigates to the <code>ConversationScreen</code> component from the <code>MessagesScreen</code>; a screen in the <code>MessagesStack</code>.</p>

<p>We should now be able to navigate to the <code>ConversationScreen</code> from our <code>MessagesScreen</code> when we press on a single card.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/4q7wAAq.gif" title="pwd" width="" alt="pwd"></p>

<p>Notice that when we tap on <code>Carmelina</code> we navigate to a <code>ConversationScreen</code> which has data corresponding to <code>Carmelina</code>. The same thing occurs when we press on <code>Guntar</code>; <em>excellent</em>.</p>

<h3><a class="anchor" id="heading-milestone-4-implement-drawer-navigation-messagesscreen-hamburger-menu" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-4-implement-drawer-navigation-messagesscreen-hamburger-menu"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 4 🛣🏃 Implement Drawer Navigation &amp; MessagesScreen Hamburger Menu</strong></h3>

<p><strong>A)</strong> Import a few dependencies we'll need soon into <code>./navigation/MainTabNavigator.js</code></p>
<pre class="highlight plaintext"><code>import { Text, View, Platform } from "react-native";
import {
  createStackNavigator,
  createDrawerNavigator,
  createBottomTabNavigator
} from "react-navigation";
</code></pre>

<p><strong>B)</strong> Scroll to the bottom of this file and delete this line.</p>
<pre class="highlight plaintext"><code>export default tabNavigator;
</code></pre>

<p><strong>C)</strong> Define a new export for this file.</p>

<p>Define a new component at the bottom of this file, <code>Drawer</code>, then call the <code>createDrawerNavigator</code> function we imported to define a new const <code>drawer</code>. This <code>drawer</code> will be our default export now. Notice that the <code>createDrawerNavigator</code> takes two arguments, both objects. Learn more about how to use the drawer component <a href="https://reactnavigation.org/docs/en/drawer-navigator.html">here</a>.</p>
<pre class="highlight plaintext"><code>const Drawer = () =&gt; (
  &lt;View style=unspecified&gt;
    &lt;Text&gt;Drawer Item 1&lt;/Text&gt;
    &lt;Text&gt;Drawer Item 2&lt;/Text&gt;
  &lt;/View&gt;
);

const drawer = createDrawerNavigator(
  {
    Initial: tabNavigator
  },
  {
    contentComponent: Drawer
  }
);

export default drawer;
</code></pre>

<h4><a class="anchor" id="heading-we-should-now-see-that-if-we-swipe-from-the-left-part-of-the-screen-to-the-right-a-drawer-opens-amazing" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-see-that-if-we-swipe-from-the-left-part-of-the-screen-to-the-right-a-drawer-opens-amazing"><span class="glyphicon glyphicon-link"></span></a>We should now see that if we swipe from the left part of the screen to the right, a drawer opens, <em>amazing</em>.</h4>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/zYEJ8bv.gif" title="pwd" width="" alt="pwd"></p>

<p><strong>D)</strong> Import new dependencies so we can add the hamburger menu to <code>MessagesScreen</code>.</p>
<pre class="highlight plaintext"><code>import {
  View,
  Image,
  ScrollView,
  StyleSheet,
  TouchableOpacity
} from "react-native";
</code></pre>

<p><strong>E)</strong> Refactor the <code>MessagesScreen.navigationOptions</code> in the <code>MessagesScreen</code>. We warned ya this was gonna get more complicated =).</p>
<pre class="highlight plaintext"><code>MessagesScreen.navigationOptions = props =&gt; {
  return {
    title: "Messages",
    headerLeft: () =&gt; {
      return (
        &lt;TouchableOpacity onPress={props.navigation.openDrawer}&gt;
          &lt;Image
            style=unspecified
            source={{
              uri:
                "https://cdn3.iconfinder.com/data/icons/ui-ux-essentials-solid/24/hamburger-menu-solid-512.png"
            }}
          /&gt;
        &lt;/TouchableOpacity&gt;
      );
    }
  };
};
</code></pre>

<h4><a class="anchor" id="heading-we-should-now-see-that-everything-works-as-expected-yay" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-see-that-everything-works-as-expected-yay"><span class="glyphicon glyphicon-link"></span></a>We should now see that everything works as expected, <em>yay</em></h4>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/lmsYHKs.gif" title="pwd" width="" alt="pwd"></p>

<h2><a class="anchor" id="heading-review" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-review"><span class="glyphicon glyphicon-link"></span></a>Review 💻🤓🤔</h2>

<ul>
<li>Screen navigation is important to providing an engaging experience for users.</li>
<li>A <code>Stack Navigator</code> has screens stacked one on top of the other. We can go "down" and "up"</li>
<li>A <code>Tab Navigator</code> has tabs at the bottom of the screen.</li>
<li>A <code>Drawer Navigator</code> has a drawer that's hidden away from view until a user wants access to it.</li>
<li>Screens defined in our Navigators are all passed a <code>prop</code> from React Navigation called <code>navigation</code>.</li>
<li>The <code>navigation</code> prop is very useful prop because the object has many useful key's that we'll need in the future.</li>
<li><strong>Navigation Options</strong> is how we'll customize headers, icons, display text, &amp; etc. for our navigators.</li>
</ul>

<h3><a class="anchor" id="heading-accomplishments" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-accomplishments"><span class="glyphicon glyphicon-link"></span></a>Accomplishments 🥇🏆💯</h3>

<ul>
<li>[x] User can see tabs at the bottom of the screen.</li>
<li>[x] User can press a tab to navigate to a unique screen.</li>
<li>[x] User can see tabs which corresponds to the tabs of Zalo.</li>
<li>[x] User can see a <code>Messsages</code> screen which has many messages.</li>
<li>[x] User can press on an individual message to navigate to a <code>Conversation</code> screen.</li>
<li>[x] User can see information about the user whose message they pressed on arriving at the <code>Conversation</code> screen.</li>
<li>[x] User can see an icon on the <code>Messages</code> screen which when pressed, opens a <code>Drawer</code>.</li>
<li>[x] User can see additional navigation items when they <strong>open</strong> the <code>Drawer</code>.</li>
</ul>

<h3><a class="anchor" id="heading-rockets" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-rockets"><span class="glyphicon glyphicon-link"></span></a>Rockets 🚀</h3>

<ul>
<li>[ ] User can press on a a users profile image inside of the <code>Messages</code> screen to be directed to a profile screen.</li>
<li>[ ] User can press a link within their drawer to go to a <code>Settings</code> screen.</li>
</ul>
</div></div></div><div class="tab-pane" id="assignment"><div class="panel panel-default"><div class="panel-body markdown-body"><div class="action-bar pull-right hidden-print"><span class="section-action"><button class="btn btn-primary" onclick="LightBox.showLightBoxWithIds(&#39;lightbox-assignments&#39;, &#39;form-assignments&#39;)"><span class="glyphicon glyphicon-open" aria-hidden="true"></span>&nbsp;Submit</button></span>
<div class="lightbox" id="lightbox-assignments"><form action="http://learning.coderschool.vn/submissions/create_or_update_submission" accept-charset="UTF-8" class="form-horizontal form-submission" id="form-assignments" method="post"><div class="title"></div><button aria-label="Close" class="close" type="button"><span aria-hidden="true"> ×</span></button><h2>Submission</h2><p>Please enter your assignment submission info. After you submit, you can keep working and resubmit at any time.</p><label>GitHub Project URL</label><div class="form-group has-feedback"><div class="col-sm-12"><input type="text" name="git_repo_url" placeholder="https://github.com/username/Twitter" required="required" class="form-control" pattern="^https?:\/\/github.com\/.{2,}?\/.{2,}$" data-error="Please enter the url to your GitHub Repo (Example: https://github.com/username/TwitterLite)"><span aria-hidden="true" class="glyphicon form-control-feedback"></span><div class="help-block with-errors"></div></div></div><label>GIF or MP4 Video URL (Drag a GIF here to upload)</label><div class="form-group has-feedback"><div class="col-sm-12"><input type="text" name="gif_remote_url" placeholder="https://i.imgur.com/xyz.gif" required="required" class="form-control" pattern="^https?:\/\/.+?\/.+?\.(gifv?|mp4)(.+)?" data-error="Please enter a link to your GIF or MP4 (Example: https://i.imgur.com/U3a7L.gif)"><span aria-hidden="true" class="glyphicon form-control-feedback"></span><div class="help-block with-errors"></div></div></div><label>Hours Spent</label><div class="form-group"><div class="col-sm-12"><input type="number" name="hours_spent" placeholder="Number of hours" required="required" class="form-control" min="0" max="99" step="0.1"></div></div><label>Notes</label><div class="form-group"><div class="col-sm-12"><textarea name="notes" rows="2" cols="" placeholder="Any additional notes" class="form-control noresize"></textarea></div></div><div class="form-group"><div class="col-sm-12"><input type="submit" value="Submit" class="btn btn-primary"></div></div><input type="hidden" name="course" value="react_native_devc"><input type="hidden" name="unit" value="4"><input type="hidden" name="id"><input type="hidden" name="assignment" value="538"><input type="hidden" name="redirect_anchor" value="assignment"></form></div></div><h1><a class="anchor" id="heading-week-4-homework-todo-list" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-week-4-homework-todo-list"><span class="glyphicon glyphicon-link"></span></a>Week 4 - Homework - <strong>Todo List 📝 📅</strong></h1>

<h2><a class="anchor" id="heading-introduction" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-introduction"><span class="glyphicon glyphicon-link"></span></a>Introduction 🌟</h2>

<p>Let's build a Todo ✅ app 📱 using <a href="https://facebook.github.io/react-native/">React Native</a> &amp; <a href="https://expo.io/">Expo</a>. Our app will help users keep track of all the things they need to do!</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/djS5ZwT.jpg" title="pwd" width="" alt="pwd"></p>

<h3><a class="anchor" id="heading-features" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-features"><span class="glyphicon glyphicon-link"></span></a>Features 🎯🥇🏆</h3>

<ul>
<li>[ ] User can see a list of their todos.</li>
<li>[ ] User can toggle a todo's status of active/done.</li>
<li>[ ] User can see a different color todo background based on the todo's status.</li>
<li>[ ] When a user toggles a todo, they're directed to an individual todo screen.</li>
<li>[ ] If the user's todo list is too long, they can continue scrolling so they can see the input to add a new todo.</li>
<li>[ ] User can add a new todo by entering it and submitting.</li>
<li>[ ] User will see the input reset when they submit their todo.</li>
<li>[ ] User can see what number a todo is.</li>
</ul>

<h3><a class="anchor" id="heading-learning-objectives" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-learning-objectives"><span class="glyphicon glyphicon-link"></span></a>Learning Objectives ✍️📚📝 ️</h3>

<ol>
<li>Learn how to setup multiple screens on an app.</li>
<li>Learn how to navigate users <strong>up</strong> &amp; <strong>down</strong> a <a href="https://reactnavigation.org/docs/en/stack-navigator.html">stackNavigator</a>.</li>
<li>Learn how to pass data from one screen to another screen.</li>
<li>Learn how to customize transitions between screens.</li>
</ol>

<blockquote>
<p><strong>Tip</strong> 💡: Screens give us a way to provide a lot of content to our users for their consumption whether it's for work or play. Structuring the screens in a meaningful and easily understood way is called <a href="https://en.wikipedia.org/wiki/Information_architecture">information architecture</a>.</p>
</blockquote>

<h3><a class="anchor" id="heading-milestone-1-set-up-screens" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-1-set-up-screens"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 1 🛣🏃 Set up screens</strong></h3>

<p>Setup the three initial screens with a <a href="https://reactnavigation.org/docs/en/bottom-tab-navigator.html">bottomTabNavigator</a> which will be responsible for displaying the appropriate content to the screen. Our three screens are <strong>Complete</strong>, <strong>All</strong>, <strong>Active</strong>.</p>

<p><strong>A)</strong> Use <code>expo init</code> to create your project. I'm calling mine <code>rn-todoList</code>. Choose the <strong>tabs</strong> option when prompted by Expo.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/ZVwAdKV.png" title="pwd" width="" alt="pwd"></p>

<p><strong>B)</strong> Use the knowledge we acquired in this week's lab, <a href="https://github.com/PrimeTimeTran/rn-Zalo">Zalo Clone</a>, to refactor the boiler plate code to our requirements, <strong>Complete</strong>, <strong>All</strong>, &amp; <strong>Active</strong>.</p>

<p>We'll need to do the following steps three times. I'll do the first one, <strong>Complete</strong>, as an example just in case you forgot the previous lesson =).</p>

<ol>
<li>Replace the contents of <code>./screens/HomeScreen.js</code> with this code.</li>
</ol>

<summary>New Content</summary>
<pre class="highlight plaintext"><code>import React from 'react';
import { Text, View, StyleSheet } from 'react-native';

export default function CompleteScreen() {
  return (
    &lt;View style={styles.container}&gt;
      &lt;Text&gt;Complete Screen&lt;/Text&gt;
    &lt;/View&gt;
  );
}

CompleteScreen.navigationOptions = {
  header: null
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#fff',
    justifyContent: 'center'
  }
});
</code></pre>

<ol>
<li><p>Rename the file <code>HomeScreen</code> to <code>CompleteScreen</code>.</p></li>
<li><p>Refactor the import found in <code>./navigation/MainTabNavigator</code> to import the <code>CompleteScreen</code> component from the file we just renamed.</p></li>
</ol>
<pre class="highlight plaintext"><code>import CompleteScreen from '../screens/CompleteScreen';
</code></pre>

<ol>
<li>Rename the <code>Stack</code> variables in <code>./navigation/MainTabNavigator</code> to something consistent with the content inside of this screen. In other words, <strong>choose names that make sense</strong>.</li>
</ol>
<pre class="highlight plaintext"><code>const CompleteStack = createStackNavigator(
  {
    Complete: CompleteScreen
  },
  config
);

CompleteStack.navigationOptions = {
  tabBarLabel: 'Complete',
  tabBarIcon: ({ focused }) =&gt; (
    &lt;TabBarIcon
      focused={focused}
      name={Platform.OS === 'ios' ? 'ios-done-all' : 'md-link'}
    /&gt;
  )
};

CompleteStack.path = '';
</code></pre>

<p><strong>C)</strong> Repeat previous steps 1-4 for screens <code>All</code> &amp; <code>Active</code>.</p>

<p>These screens however will have <code>navigationOptions</code> below their component definition. The <code>title</code> key, you guessed it, corresponds to the <code>title</code> of the screen. For example, here's the <code>AllScreen</code> navigationOptions.</p>
<pre class="highlight plaintext"><code>AllScreen.navigationOptions = {
  title: 'All Todos'
};
</code></pre>

<p>We'll leave the other steps up to you. Here's a little help:</p>
<pre class="highlight plaintext"><code>import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function AllScreen() {
  return (
    &lt;View style={styles.container}&gt;
      &lt;Text&gt;All Screen&lt;/Text&gt;
    &lt;/View&gt;
  );
}

AllScreen.navigationOptions = {
  title: 'All Todos'
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#fff',
    justifyContent: 'center'
  }
});
</code></pre>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/w46pwzP.gif" title="pwd" width="" alt="pwd"></p>

<h4><a class="anchor" id="heading-we-should-now-see-something-like-this-excellent" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-see-something-like-this-excellent"><span class="glyphicon glyphicon-link"></span></a>We should now see something like this, <em>excellent</em></h4>

<hr>

<blockquote>
<p>Key Points 🔑📝</p>
</blockquote>

<ul>
<li>It's super easy to spit out a new app that has tab navigation.</li>
<li>The <a href="https://reactnavigation.org/docs/en/bottom-tab-navigator.html">bottomTabNavigator</a> as it's name suggests has tabs at the bottom of the screen.</li>
<li><strong>Navigation Options</strong> is how we'll customize headers, icons, display text, &amp; etc. for our navigators.</li>
<li>There are an infinite number of ways to customize our headers. Read more about other ways <a href="https://reactnavigation.org/docs/en/headers.html">here</a>.</li>
</ul>

<hr>

<h3><a class="anchor" id="heading-milestone-2-implement-listing-adding-toggling-and-removing-todos" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-2-implement-listing-adding-toggling-and-removing-todos"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 2 🛣🏃 Implement listing, adding, toggling, and removing todos</strong></h3>

<p><strong>A)</strong> Use placeholder data to help us move quickly.</p>

<ol>
<li>Copy this dummy todos data to <code>./utils/data.js</code>:</li>
</ol>

<p>These todo <code>objects</code> have three keys. Study them carefully because we'll be working with the shortly.</p>
<pre class="highlight plaintext"><code>export const TODOS = [
  {
    id: 1,
    status: 'Done',
    body: 'Read Instructions'
  },
  {
    id: 2,
    status: 'Done',
    body: 'Think a bit'
  },
  {
    id: 3,
    status: 'Done',
    body: "Google 'How to build todo app"
  },
  {
    id: 4,
    status: 'Done',
    body: 'Read results from Google'
  },
  {
    id: 5,
    status: 'Done',
    body: "Google 'How to build todo app using React Native"
  },
  {
    id: 6,
    status: 'Active',
    body: 'Read results from Google again'
  },
  {
    id: 7,
    status: 'Active',
    body: 'Spend some more time thinking'
  },
  {
    id: 8,
    status: 'Active',
    body: 'Use knowledge gained at CoderSchool to build new todo app'
  }
];
</code></pre>

<ol>
<li>Import data from this file to our <code>AllScreen</code> component.</li>
</ol>
<pre class="highlight plaintext"><code>import { TODOS } from '../utils/data.js';
</code></pre>

<ol>
<li>Console log the data to confirm we've got it in <code>AllScreen</code>.</li>
</ol>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/UG8kIwB.gif" title="pwd" width="" alt="pwd"></p>

<h4><a class="anchor" id="1-heading-we-should-now-see-something-like-this-excellent" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#1-heading-we-should-now-see-something-like-this-excellent"><span class="glyphicon glyphicon-link"></span></a>We should now see something like this, <em>excellent</em></h4>

<p><strong>B)</strong> Update the styles at the bottom of <code>AllScreen</code> so we can <em>create a beautiful component</em> in the next step</p>
<pre class="highlight plaintext"><code>const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#fff',
    justifyContent: 'center'
  },
  todoItem: {
    margin: 5,
    padding: 10,
    width: '95%',
    minHeight: 20,
    color: 'white',
    borderRadius: 5,
    flexWrap: 'wrap'
  },
  todoText: {
    fontSize: 20,
    color: 'white',
    fontWeight: 'bold'
  }
});
</code></pre>

<p><strong>C)</strong> Define a new <code>TodoItem</code> component above our <code>AllScreen</code> component. Before moving to the next step, think about what this component is doing and what <code>props</code> it needs.</p>
<pre class="highlight plaintext"><code>const TodoItem = props =&gt; {
  const statusStyle = {
    backgroundColor: props.todo.status === 'Done' ? 'blue' : 'green'
  };
  return (
    &lt;TouchableOpacity
      key={props.todo.body}
      style={[styles.todoItem, statusStyle]}
    &gt;
      &lt;Text style={styles.todoText}&gt;
        {props.idx + 1}: {props.todo.body}
      &lt;/Text&gt;
    &lt;/TouchableOpacity&gt;
  );
};
</code></pre>

<p>Could you think of any other ways to write this...?</p>

<p><strong>D)</strong> Update the imports at the top of the file to grab the things we'll need.</p>
<pre class="highlight plaintext"><code>import React, { useState } from 'react';
import { Text, View, Alert, StyleSheet, TouchableOpacity } from 'react-native';
</code></pre>

<p><strong>E)</strong> Refactor the <code>AllScreen</code> component to map over our <code>TODOS</code> data rendering a <code>TodoItem</code> component for each todo.</p>
<pre class="highlight plaintext"><code>&lt;View style={styles.container}&gt;
  {TODOS.map((todo, idx) =&gt; {
    return &lt;TodoItem key={todo.body} todo={todo} idx={idx} /&gt;;
  })}
&lt;/View&gt;
</code></pre>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/gm8WHbG.gif" title="pwd" width="" alt="pwd"></p>

<h4><a class="anchor" id="heading-we-should-now-see-something-like-this-incredible" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-see-something-like-this-incredible"><span class="glyphicon glyphicon-link"></span></a>We should now see something like this, <em>incredible</em></h4>

<p>However, we're unable to toggle a todo's status.</p>

<p><strong>F)</strong> Add state to our component with <code>useState</code> and set it's initial value to that of the dummy data.</p>
<pre class="highlight plaintext"><code>const [todoList, setTodoList] = useState(TODOS);
</code></pre>

<p><strong>G)</strong> Define a function, <code>onToggleTodo</code>, inside of <code>AllScreen</code> which will perform the logic of changing a todo's status.</p>
<pre class="highlight plaintext"><code>const onToggleTodo = id =&gt; {
  const todo = todoList.find(todo =&gt; todo.id === id);
  todo.status = todo.status === 'Done' ? 'Active' : 'Done';
  const foundIndex = todoList.findIndex(todo =&gt; todo.id === id);
  todoList[foundIndex] = todo;
  const newTodoList = [...todoList];
  setTodoList(newTodoList);
};
</code></pre>

<p><strong>H)</strong> Pass the function to our <code>TodoItem</code> component.</p>
<pre class="highlight plaintext"><code>&lt;View style={styles.container}&gt;
  {todoList.map((todo, idx) =&gt; {
    return (
      &lt;TodoItem
        idx={idx}
        todo={todo}
        key={todo.body}
        onToggleTodo={onToggleTodo}
      /&gt;
    );
  })}
&lt;/View&gt;
</code></pre>

<p><strong>I)</strong> Pass <code>onToggleTodo</code> to our <code>TouchableOpacity</code> component's <code>onPress</code> prop within the body of <code>TodoItem</code>.</p>

<p>Make sure to pass the <code>id</code> as an argument to the call.</p>
<pre class="highlight plaintext"><code>const TodoItem = props =&gt; {
  const statusStyle = {
    backgroundColor: props.todo.status === "Done" ? "blue" : "green"
  };
  return (
    &lt;TouchableOpacity
      onPress={() =&gt; props.onToggleTodo(props.todo.id)}
    &gt;
  );
};
</code></pre>

<h4><a class="anchor" id="heading-we-should-now-be-able-to-toggle-the-status-of-a-todo-amazing" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-be-able-to-toggle-the-status-of-a-todo-amazing"><span class="glyphicon glyphicon-link"></span></a>We should now be able to toggle the status of a todo, <em>amazing</em></h4>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/uEfeuwP.gif" title="pwd" width="" alt="pwd"></p>

<p><strong>J)</strong> Define a new function, <code>onDeleteTodo</code> which implements the behavior of removing a todo from our list.</p>
<pre class="highlight plaintext"><code>const onDeleteTodo = id =&gt; {
  const newTodoList = todoList.filter(todo =&gt; todo.id !== id);
  setTodoList(newTodoList);
};
</code></pre>

<p><strong>K)</strong> Pass <code>onDeleteTodo</code> to our <code>TodoItem</code>.</p>
<pre class="highlight plaintext"><code>&lt;TodoItem onDeleteTodo={onDeleteTodo} /&gt;
</code></pre>

<p><strong>L)</strong> Define a new function in <code>TodoItem</code>, <code>onLongPress</code>, which implements alerting the user and asking them to confirm their delete.</p>
<pre class="highlight plaintext"><code>const onLongPress = todo =&gt; {
  const prompt = `"${todo.body}"`;
  Alert.alert(
    'Delete your todo?',
    prompt,
    [
      {
        text: 'Cancel',
        onPress: () =&gt; console.log('Cancel Pressed'),
        style: 'cancel'
      },
      { text: 'OK', onPress: () =&gt; props.onDeleteTodo(todo.id) }
    ],
    { cancelable: true }
  );
};
</code></pre>

<p><strong>M)</strong> Pass <em>our</em> function, <code>onLongPress</code>, to the <code>onLongPress</code> prop of <code>TouchableOpacity</code>. Make sure to pass it the todo as an argument.</p>
<pre class="highlight plaintext"><code>&lt;TouchableOpacity onLongPress={() =&gt; onLongPress(props.todo)} /&gt;
</code></pre>

<h4><a class="anchor" id="heading-we-should-now-be-able-to-delete-a-todo-excellent" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-we-should-now-be-able-to-delete-a-todo-excellent"><span class="glyphicon glyphicon-link"></span></a>We should now be able to delete a todo, <em>excellent</em></h4>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/HzrRw2X.gif" title="pwd" width="" alt="pwd"></p>

<blockquote>
<p><strong>Tip</strong> 💡: There is <strong>no such thing</strong> as perfect software/libraries/tools. Expo has <strong>many bugs</strong>. <a href="https://github.com/expo/expo/issues">Read</a> about some of them. While writing this assignment we found a bug where an <code>Alert</code> that's opened cannot be dismissed. This bug occurs on the simulator. You may need to work on a device to be able to press either <code>cancel</code> or <code>ok</code>.</p>
</blockquote>

<p><strong>N)</strong> Implement adding a todo by importing <code>TextInput</code> from React Native.</p>
<pre class="highlight plaintext"><code>import { TextInput } from 'react-native';
</code></pre>

<p><strong>O)</strong> Add styling for our <code>TextInput</code> and the button a user presses to submit.</p>
<pre class="highlight plaintext"><code>const styles = StyleSheet.create({
  // ... more styles
  todoInput: {
    width: '95%',
    minHeight: 30,
    color: 'white',
    borderWidth: 1,
    marginTop: '20%',
    marginBottom: '5%',
    borderColor: 'grey'
  },
  inputContainer: {
    flex: 1,
    width: '90%',
    marginTop: 20,
    marginBottom: '10%',
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: {
    height: 50,
    width: '50%',
    borderRadius: 10,
    alignItems: 'center',
    backgroundColor: 'blue',
    justifyContent: 'center'
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold'
  }
});
</code></pre>

<p><strong>P)</strong> Define a new piece of state, <code>todoBody</code>.</p>
<pre class="highlight plaintext"><code>const [todoBody, setTodoBody] = useState('');
</code></pre>

<p><strong>Q)</strong> Define a new function, <code>onSubmitTodo</code>, which will handle adding a todo to our list.</p>

<p>Notice we check the todo's length before allowing the user to submit, <em>validations</em> for the win!</p>
<pre class="highlight plaintext"><code>const onSubmitTodo = () =&gt; {
  const newTodo = {
    body: todoBody,
    status: 'Active',
    id: todoList.length + 1
  };
  const newTodoList = [...todoList, newTodo];
  setTodoList(newTodoList);
  setTodoBody('');
};
</code></pre>

<p><strong>R)</strong> Add the appropriate JSX to the <code>AllScreen</code> component's return.</p>
<pre class="highlight plaintext"><code>&lt;View style={styles.inputContainer}&gt;
  &lt;TextInput
    value={todoBody}
    style={styles.todoInput}
    onChangeText={text =&gt; setTodoBody(text)}
  /&gt;
  &lt;TouchableOpacity style={styles.button} onPress={onSubmitTodo}&gt;
    &lt;Text style={styles.buttonText}&gt;Submit&lt;/Text&gt;
  &lt;/TouchableOpacity&gt;
&lt;/View&gt;
</code></pre>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/H753UtG.gif" title="pwd" width="" alt="pwd"></p>

<h4><a class="anchor" id="heading-you-should-now-be-able-to-create-a-new-todo-excellent" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-you-should-now-be-able-to-create-a-new-todo-excellent"><span class="glyphicon glyphicon-link"></span></a>You should now be able to create a new todo, <em>excellent</em></h4>

<p>However, we have a problem.</p>

<p>Watch til the end of the gif. On an actual device our submit button is unreachable.</p>

<blockquote>
<p>Key Points 🔑📝</p>
</blockquote>

<ul>
<li>Remember the keyboard when working with <code>TextInput</code>.</li>
</ul>

<hr>

<h3><a class="anchor" id="heading-milestone-3-kick-the-user-over-to-a-new-screen-when-they-toggle-add-some-transitions-fix-the-submit-problem" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-milestone-3-kick-the-user-over-to-a-new-screen-when-they-toggle-add-some-transitions-fix-the-submit-problem"><span class="glyphicon glyphicon-link"></span></a><strong>Milestone 3 🛣🏃 Kick the user over to a new screen when they toggle. Add some transitions &amp; fix the submit problem</strong></h3>

<p>Remember this image? Conceptually this is what we're doing. We want to push a new screen on top of the one we're currently on, <code>AllScreen</code>, and then when a user presses back, pop it off.</p>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/stack.png" title="Stack Navigator" width="" alt="Stack Navigator"></p>

<p><strong>A)</strong> Define a new component <code>SingleTodoScreen</code> which will show the information about a single todo.</p>
<pre class="highlight plaintext"><code>import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

const SingleTodoScreen = props =&gt; {
  const { id, status, body } = props.navigation.state.params.updatedTodo;
  return (
    &lt;View style={styles.container}&gt;
      &lt;Text style={styles.headerText}&gt;
        {id}. {status}
      &lt;/Text&gt;
      &lt;Text style={styles.bodyText}&gt;{body}&lt;/Text&gt;
    &lt;/View&gt;
  );
};

SingleTodoScreen.navigationOptions = {
  title: 'SingleTodoScreen'
};

export default SingleTodoScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  headerContainer: {
    flexDirection: 'row'
  },
  headerText: {
    fontSize: 30
  },
  bodyText: {
    fontSize: 50
  }
});
</code></pre>

<p>Take special note of this line. This is how we're going to receive data to know what to render on this screen. Can you explain in detail what's going on here?</p>
<pre class="highlight plaintext"><code>const { id, status, body } = props.navigation.state.params.updatedTodo;
</code></pre>

<p><strong>B)</strong> Define the <em>props</em> parameter sent in as the first argument to our <code>AllScreen</code> component.</p>
<pre class="highlight plaintext"><code>export default function AllScreen(props) {
  // ... code ...
}
</code></pre>

<p><strong>C)</strong> In the body of <code>onToggleTodo</code> add a new <code>setTimeout</code> which fires the function that moves the user from our <code>AllScreen</code> screen to do <code>SingleTodoScreen</code>.</p>
<pre class="highlight plaintext"><code>setTimeout(() =&gt; {
  props.navigation.navigate('SingleTodo', {
    updatedTodo: todo
  });
}, 1000);
</code></pre>

<p>Nothing fancy here.</p>

<p>We're calling a function <code>navigate</code>, which is inside of an object <code>navigation</code>; which is itself inside of another object <code>props</code> that is passed to us. Remember this comes for free from React Navigation.</p>

<p>The function call is given two arguments.</p>

<ol>
<li>A string, <code>"SingleTodo"</code></li>
<li>An object, <code>{ updatedTodo: todo }</code></li>
</ol>

<p>This is how <code>SingleTodoScreen</code> gets the data it needs to render!</p>

<p><strong>D)</strong> Import <code>SingleTodoScreen</code> from it's file into our <code>./navigation/MainTabNavigator.js</code></p>
<pre class="highlight plaintext"><code>import SingleTodoScreen from '../screens/SingleTodoScreen';
</code></pre>

<p><strong>D)</strong> Add this screen as a key to the appropriate Stack, <code>AllStack</code>.</p>
<pre class="highlight plaintext"><code>const AllStack = createStackNavigator(
  {
    All: AllScreen,
    SingleTodo: SingleTodoScreen
  },
  config
);
</code></pre>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/Hly3n2h.gif" title="pwd" width="" alt="pwd"></p>

<p><strong>E)</strong> Fix problem where user cannot see the submit button when the keyboard slides into view and add a background. Also, add the ability for the user to be able to "scroll" the todos away so they can see the background</p>

<ol>
<li>Import the components we'll need to fix these problems.</li>
</ol>
<pre class="highlight plaintext"><code>import {
  ScrollView,
  ImageBackground,
  KeyboardAvoidingView
} from 'react-native';
</code></pre>

<ol>
<li>Wrap everything we have so far with these components, passed a few properties.</li>
</ol>
<pre class="highlight plaintext"><code>&lt;ImageBackground style={styles.container} source=unspecified&gt;
  &lt;KeyboardAvoidingView
    enabled
    behavior="padding"
    style={}
  &gt;
    &lt;ScrollView style=unspecified&gt;
      &lt;View style=unspecified&gt;
        {/* ... code ... */}
      &lt;/View&gt;
    &lt;/ScrollView&gt;
  &lt;/KeyboardAvoidingView&gt;
&lt;/ImageBackground&gt;
</code></pre>

<ol>
<li>Update the styles in <code>AllScreen</code>.</li>
</ol>
<pre class="highlight plaintext"><code>const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#fff',
    backgroundColor: 'black',
    justifyContent: 'center'
  },
  todoItem: {
    margin: 5,
    padding: 10,
    minHeight: 50,
    width: '95%',
    color: 'white',
    borderRadius: 5,
    flexWrap: 'wrap'
  },
  todoText: {
    fontSize: 20,
    color: 'white',
    fontWeight: 'bold'
  },
  todoInput: {
    width: '95%',
    minHeight: 30,
    color: 'white',
    borderWidth: 1,
    marginTop: '20%',
    marginBottom: '5%',
    borderColor: 'grey'
  },
  inputContainer: {
    flex: 1,
    width: '90%',
    marginTop: 20,
    marginBottom: '10%',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 100
  },
  button: {
    height: 50,
    width: '50%',
    borderRadius: 10,
    alignItems: 'center',
    backgroundColor: 'blue',
    justifyContent: 'center'
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold'
  },
  scrollView: {
    flex: 1,
    paddingTop: 1000
  }
});
</code></pre>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/A7pfFDM.gif" title="pwd" width="" alt="pwd"></p>

<blockquote>
<p><strong>Key Points</strong> 🔑📝</p>
</blockquote>

<ul>
<li>Adding background images is a breeze.</li>
<li><code>KeyboardAvoidingView</code> helps us avoid covering the <code>UI</code> when the user needs it.</li>
</ul>

<hr>

<p><img src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/gVWFD2t.gif" title="pwd" width="" alt="pwd"></p>

<h2><a class="anchor" id="heading-review" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-review"><span class="glyphicon glyphicon-link"></span></a>Review 💻🤓🤔</h2>

<ul>
<li>React Navigation allows us to create as many screens as we want.</li>
<li>We can style our screens how we want using the config property of a navigator.</li>
<li>We can also style through the <code>navigationOptions</code> api.</li>
<li>We can pass props to screens we navigation to through <code>props.navigation.navigate.state.params</code>.</li>
<li>We can transition between screens however want using configs on our navigators as well.</li>
</ul>

<h3><a class="anchor" id="heading-accomplishments" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-accomplishments"><span class="glyphicon glyphicon-link"></span></a>Accomplishments 🥇🏆💯</h3>

<ul>
<li>[x] User can see a list of their todos.</li>
<li>[x] User can toggle a todo's status of active/done.</li>
<li>[x] User can see a different color todo background based on the todo's status.</li>
<li>[x] When a user toggles a todo, they're directed to an individual todo screen.</li>
<li>[x] If the user's todo list is too long, they can continue scrolling so they can see the input to add a new todo.</li>
<li>[x] User can add a new todo by entering it and submitting.</li>
<li>[x] User will see the input reset when they submit their todo.</li>
</ul>

<h3><a class="anchor" id="heading-rockets" href="http://learning.coderschool.vn/courses/react_native_devc/unit/4#heading-rockets"><span class="glyphicon glyphicon-link"></span></a>Rockets 🚀</h3>

<ul>
<li>[ ] User can see completed todos on the <code>CompleteScreen</code>.</li>
<li>[ ] User can see active todos on the <code>ActiveScreen</code>.</li>
<li>[ ] User can delete a todo by long pressing it and being prompted to confirm their action.</li>
<li>[ ] User can cancel deleting a todo.</li>
<li>[ ] User can slide the todos list to see the entire app wallpaper.</li>
</ul>
</div></div></div></div></div></div></div><script src="./Lab_ Week 4 - React Native Devc _ CoderS©hool Courses_files/application.js"></script></body></html>